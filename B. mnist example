{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"B. MNIST example","provenance":[],"authorship_tag":"ABX9TyPepaeQYucSfVtuhTbP6KyT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"jkipDcfoYq4I","colab_type":"text"},"source":["## PyTorch Tutorial\n","\n","IFT6135 â€“ Representation Learning\n","\n","A Deep Learning Course, January 2020\n","\n","By Chin-Wei Huang "]},{"cell_type":"code","metadata":{"id":"s2ldms6fYp63","colab_type":"code","colab":{}},"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","import torchvision\n","import torchvision.transforms\n","\n","\n","from_numpy = torch.from_numpy"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HACEUO4xY2ya","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"7a320ca0-41eb-40c2-8d9e-1abc40ddf747","executionInfo":{"status":"ok","timestamp":1579498037479,"user_tz":300,"elapsed":1031,"user":{"displayName":"Chin-Wei Huang","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB0YZN_UP_2Nf2Ega66XRR1oJwSHZ_x3lXywxoamw=s64","userId":"09413186390566970719"}}},"source":["batch_size = 64\n","num_epochs = 10\n","cuda = torch.cuda.is_available()\n","if cuda:\n","    print('cuda is available')\n","else:\n","    print('cuda is not available')\n","\n","store_every = 1000\n","lr0 = 0.02\n","#model_type = 'MLP'\n","model_type = 'CNN'"],"execution_count":2,"outputs":[{"output_type":"stream","text":["cuda is available\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4dfsuA8yZBDA","colab_type":"text"},"source":["Loading data"]},{"cell_type":"code","metadata":{"id":"8m38dBJkY6X0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"9141ec64-0ed2-45a2-cf92-aee09cb77b73","executionInfo":{"status":"ok","timestamp":1579498041723,"user_tz":300,"elapsed":3219,"user":{"displayName":"Chin-Wei Huang","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB0YZN_UP_2Nf2Ega66XRR1oJwSHZ_x3lXywxoamw=s64","userId":"09413186390566970719"}}},"source":["mnist_transforms = torchvision.transforms.Compose(\n","        [torchvision.transforms.ToTensor()])\n","mnist_train = torchvision.datasets.MNIST(\n","        root='./data', train=True, \n","        transform=mnist_transforms, download=True)\n","mnist_test = torchvision.datasets.MNIST(\n","        root='./data', train=False, \n","        transform=mnist_transforms, download=True)\n","\n","train_loader = torch.utils.data.DataLoader(\n","        mnist_train, batch_size=batch_size, shuffle=True, num_workers=2)\n","test_loader = torch.utils.data.DataLoader(\n","        mnist_test, batch_size=batch_size, shuffle=True, num_workers=2)\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["\r0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./data/MNIST/raw/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["9920512it [00:01, 8638597.14it/s]                            \n"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/train-images-idx3-ubyte.gz to ./data/MNIST/raw\n"],"name":"stdout"},{"output_type":"stream","text":["  0%|          | 0/28881 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./data/MNIST/raw/train-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["32768it [00:00, 130768.21it/s]           \n","  0%|          | 0/1648877 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/train-labels-idx1-ubyte.gz to ./data/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./data/MNIST/raw/t10k-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["1654784it [00:00, 2136335.97it/s]                            \n","0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/t10k-images-idx3-ubyte.gz to ./data/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./data/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["8192it [00:00, 50326.91it/s]            \n"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/MNIST/raw\n","Processing...\n","Done!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2YKr-TXTZNHD","colab_type":"text"},"source":["Defining customized modules"]},{"cell_type":"code","metadata":{"id":"830UZGxSZCj2","colab_type":"code","colab":{}},"source":["class ResLinear(nn.Module):\n","\n","    def __init__(self, in_features, out_features, activation=nn.ReLU()):\n","        super(ResLinear, self).__init__()\n","        \n","        self.in_features = in_features\n","        self.out_features = out_features\n","        self.activation = activation\n","        \n","        self.linear = nn.Linear(in_features, out_features)\n","        if in_features != out_features:\n","            self.project_linear = nn.Linear(in_features, out_features)\n","        \n","    def forward(self, x):\n","        inner = self.activation(self.linear(x))\n","        if self.in_features != self.out_features:\n","            skip = self.project_linear(x)\n","        else:\n","            skip = x\n","        return inner + skip\n","\n","\n","class Flatten(nn.Module):\n","    def forward(self, x):\n","        x = x.view(x.size(0), -1)\n","        return x"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-FV5DdhIZQIV","colab_type":"text"},"source":["Building model"]},{"cell_type":"code","metadata":{"id":"fMQyGaKKZRw4","colab_type":"code","colab":{}},"source":["if model_type == 'MLP':        \n","    model = nn.Sequential(\n","        ResLinear(784, 312),\n","        nn.ReLU(),\n","        ResLinear(312, 312),\n","        nn.ReLU(),\n","        ResLinear(312, 10)\n","    )\n","elif model_type == 'CNN':\n","    model = nn.Sequential(\n","        nn.Conv2d(1, 16, 5),\n","        nn.ReLU(),\n","        nn.MaxPool2d(2),\n","        nn.Conv2d(16, 16, 5),\n","        nn.ReLU(),\n","        nn.MaxPool2d(2),\n","        Flatten(),\n","        ResLinear(256, 100),\n","        nn.ReLU(),\n","        ResLinear(100, 10)\n","    )\n","\n","if cuda:\n","    model = model.cuda()\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(model.parameters(), lr=lr0)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AgblR1dpZgYR","colab_type":"text"},"source":["Learning rate schedule"]},{"cell_type":"code","metadata":{"id":"h2uESK6jZSGQ","colab_type":"code","colab":{}},"source":["def adjust_lr(optimizer, epoch, total_epochs):\n","    lr = lr0 * (0.1 ** (epoch / float(total_epochs)))\n","    for param_group in optimizer.param_groups:\n","        param_group['lr'] = lr\n","# `torch.optim.lr_scheduler` can be your good friend"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IS118esnZm8U","colab_type":"text"},"source":["Evaluation functions"]},{"cell_type":"code","metadata":{"id":"tfJxfwKkZoP0","colab_type":"code","colab":{}},"source":["def accuracy(proba, y):\n","    correct = torch.eq(proba.max(1)[1], y).sum().type(torch.FloatTensor)\n","    return correct / y.size(0)\n","    \n","    \n","def evaluate(dataset_loader, criterion):\n","    LOSSES = 0\n","    COUNTER = 0\n","    for batch in dataset_loader:\n","        optimizer.zero_grad()\n","\n","        x, y = batch\n","        if model_type == 'MLP':\n","            x = x.view(-1,784)\n","            y = y.view(-1)\n","        elif model_type == 'CNN':\n","            x = x.view(-1,1,28,28)\n","            y = y.view(-1)\n","        if cuda:\n","            x = x.cuda()\n","            y = y.cuda()\n","            \n","        loss = criterion(model(x), y)\n","        n = y.size(0)\n","        LOSSES += loss.sum().data.cpu().numpy() * n\n","        COUNTER += n\n","    return LOSSES / float(COUNTER)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5Qmpwu48Zp0J","colab_type":"text"},"source":["Training loop"]},{"cell_type":"code","metadata":{"id":"mmGqCNryZpBd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":528},"outputId":"cfef3710-e945-41eb-95f1-4ba4886bd6e7","executionInfo":{"status":"error","timestamp":1579498091863,"user_tz":300,"elapsed":27864,"user":{"displayName":"Chin-Wei Huang","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB0YZN_UP_2Nf2Ega66XRR1oJwSHZ_x3lXywxoamw=s64","userId":"09413186390566970719"}}},"source":["LOSSES = 0\n","COUNTER = 0\n","ITERATIONS = 0\n","learning_curve_nll_train = list()\n","learning_curve_nll_test = list()\n","learning_curve_acc_train = list()\n","learning_curve_acc_test = list()\n","for e in range(num_epochs):\n","    for batch in train_loader:\n","        optimizer.zero_grad()\n","\n","        x, y = batch\n","        if model_type == 'MLP':\n","            x = x.view(-1,784)\n","            y = y.view(-1)\n","        elif model_type == 'CNN':\n","            x = x.view(-1,1,28,28)\n","            y = y.view(-1)\n","        if cuda:\n","            x = x.cuda()\n","            y = y.cuda()\n","            \n","        loss = criterion(model(x), y)\n","        loss.backward()\n","        optimizer.step()\n","        \n","        n = y.size(0)\n","        LOSSES += loss.sum().data.cpu().numpy() * n\n","        COUNTER += n\n","        ITERATIONS += 1\n","        if ITERATIONS%(store_every/5) == 0:\n","            avg_loss = LOSSES / float(COUNTER)\n","            LOSSES = 0\n","            COUNTER = 0\n","            print(\" Iteration {}: TRAIN {}\".format(\n","                ITERATIONS, avg_loss))\n","    \n","        if ITERATIONS%(store_every) == 0:     \n","            train_loss = evaluate(train_loader, criterion)\n","            learning_curve_nll_train.append(train_loss)\n","            test_loss = evaluate(test_loader, criterion)\n","            learning_curve_nll_test.append(test_loss)\n","\n","            train_acc = evaluate(train_loader, accuracy)\n","            learning_curve_acc_train.append(train_acc)\n","            test_acc = evaluate(test_loader, accuracy)\n","            learning_curve_acc_test.append(test_acc)\n","                    \n","            print(\" [NLL] TRAIN {} / TEST {}\".format(\n","                train_loss, test_loss))\n","            print(\" [ACC] TRAIN {} / TEST {}\".format(\n","                train_acc, test_acc))\n","    \n","    adjust_lr(optimizer, e+1, num_epochs)\n","    "],"execution_count":8,"outputs":[{"output_type":"stream","text":[" Iteration 200: TRAIN 1.5450818030536175\n"," Iteration 400: TRAIN 0.42579472906887533\n"," Iteration 600: TRAIN 0.2779612550511956\n"," Iteration 800: TRAIN 0.2195911507308483\n"," Iteration 1000: TRAIN 0.17705151042842626\n"," [NLL] TRAIN 0.14819818447033564 / TEST 0.13436604273319244\n"," [ACC] TRAIN 0.9558 / TEST 0.9597\n"," Iteration 1200: TRAIN 0.15458728048950435\n"," Iteration 1400: TRAIN 0.13754858313128351\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-d8250c65a191>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mlearning_curve_acc_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0me\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_epochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    802\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    803\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_shutdown\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 804\u001b[0;31m             \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    805\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    806\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_get_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    769\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    770\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 771\u001b[0;31m                 \u001b[0msuccess\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    772\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    773\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_try_get_data\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    722\u001b[0m         \u001b[0;31m#   (bool: whether successfully get data, any: data if successful else None)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    723\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 724\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data_queue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    725\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    726\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/queues.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    102\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m                     \u001b[0mtimeout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdeadline\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmonotonic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 104\u001b[0;31m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    105\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/connection.py\u001b[0m in \u001b[0;36mpoll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_readable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 257\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__enter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/connection.py\u001b[0m in \u001b[0;36m_poll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/connection.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(object_list, timeout)\u001b[0m\n\u001b[1;32m    909\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    910\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 911\u001b[0;31m                 \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    912\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    913\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfileobj\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/selectors.py\u001b[0m in \u001b[0;36mselect\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    374\u001b[0m             \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    375\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 376\u001b[0;31m                 \u001b[0mfd_event_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    377\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInterruptedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    378\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"DSejvQRCZvmx","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}